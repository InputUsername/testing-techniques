TYPEDEF AuthorizedCmd ::=
      Register { rusername, rpassword :: String }
    | Login { lusername, lpassword :: String }
    | CreateRoom { cname :: String }
    | JoinRoom { rname :: String }
ENDDEF

TYPEDEF Cmd ::=
      Unauthorized { ucmd :: String }
    | Authorized { bearer :: String; acmd :: AuthorizedCmd }
ENDDEF

TYPEDEF Res ::=
      Ok
    | Bearer { btoken :: String }
    | Error { code :: Int; err_message :: String } 
ENDDEF

STAUTDEF matrixstaut [ Inp :: Cmd; Outp :: Res ] ( ) ::=
    STATE
        init, waitbearer, bearer, register
    VAR
        authentication_type :: String;
        token :: String;
        res :: Res;
        username :: String;
        password :: String
    INIT
        init { 
            authentication_type := "unauthenticated";
            token := "";
            username := "";
            password := ""
            }
    TRANS
        init -> Inp ? req [[ isUnauthorized(req) ]] -> waitbearer
        waitbearer -> Outp ! res [[ isBearer(res) ]] { token := btoken(res) } -> bearer
ENDDEF

PROCDEF Authenticate [ Inp :: Cmd; Outp :: Bearer ]  () ::=
    Inp ?cmd [[IF is]]

ENDDEF



CHANDEF Chans
::=
    Input :: Cmd ;
    Output :: Res
ENDDEF

MODELDEF    Matrix
::=
    CHAN IN     Input
    CHAN OUT    Output

    BEHAVIOUR
        matrixstaut [Input, Output] ()
ENDDEF

CNECTDEF Sut
::=
    CLIENTSOCK

    CHAN OUT    Input   HOST "localhost" PORT 7890
    ENCODE      Input   ? s -> ! toString(s)

    CHAN IN     Output  HOST "localhost" PORT 7890
    DECODE      Output  ! fromString(s) <- ? s 
ENDDEF
