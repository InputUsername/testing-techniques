-- Commands that may be made as 'input' to Matrix
TYPEDEF Cmd ::=
      Authorize { uusr, upwd :: String }
    | Register { ruusr, rpwd :: String }
    | CreateRoom { crname :: String }
    | JoinRoom { jrname :: String }
ENDDEF

-- Responses that may be received, as 'output' from Matrix
TYPEDEF Res ::=
      Ok
    | Bearer { btoken :: String }
    | Error { code :: Int; err_message :: String } 
ENDDEF

-- Username validation according to https://matrix.org/docs/spec/appendices#user-identifiers
FUNCDEF isValidUsername ( val :: String ) :: Bool
 ::=
    strinre( val, REGEX('[a-z0-9.=_-/]{1,255}') )
ENDDEF

-- TODO: extend regex based on:
-- https://matrix.org/docs/spec/client_server/r0.6.1#notes-on-password-management
FUNCDEF isValidPassword ( val :: String ) :: Bool
 ::=
    strinre( val, REGEX('[A-Za-z0-9.=_-/]{8,255}') )
ENDDEF

-- TODO: find room name specification. For now exclude white space characters,
-- since it is harder for serialization/deserialization (command arguments are now
-- white-space separated).
FUNCDEF isValidRoomName ( val :: String ) :: Bool
 ::=
    strinre( val, REGEX('[A-Za-z]{8,255}') )
ENDDEF

-- Matrix
PROCDEF MatrixProc [Input :: Cmd; Output :: Res] 
                    ( 

                    ) EXIT
::= Input ?cmd [[IF isAuthorize(cmd)
                THEN isValidUsername(uusr(cmd)) /\ isValidPassword(upwd(cmd))
                ELSE False
                FI]]
    >-> 
    Output ?res
    >->
    MatrixProc[Input, Output]()
        
ENDDEF

CHANDEF Chans
::=
    Input :: Cmd ;
    Output :: Res
ENDDEF

MODELDEF    Matrix
::=
    CHAN IN     Input
    CHAN OUT    Output

    BEHAVIOUR
        MatrixProc [Input, Output] ()
ENDDEF

CNECTDEF Sut
::=
    CLIENTSOCK

    CHAN OUT    Input   HOST "localhost" PORT 7890
    ENCODE      Input   ? s -> ! toString(s)

    CHAN IN     Output  HOST "localhost" PORT 7890
    DECODE      Output  ! fromString(s) <- ? s 
ENDDEF
