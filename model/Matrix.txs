TYPEDEF AuthorizedCmd ::=
      Register { rusername, rpassword :: String }
    | Login { lusername, lpassword :: String }
    | CreateRoom { cname :: String }
    | JoinRoom { rname :: String }
ENDDEF

TYPEDEF Cmd ::=
      Unauthorized { ucmd :: String }
    | Authorized { bearer :: String; acmd :: AuthorizedCmd }
ENDDEF

STAUTDEF matrix [ Inp :: String; Outp :: Cmd ] ( ) ::=
    STATE
        init, bearer
    VAR
        authentication_type :: String;
        authentication_token :: String;
        username :: String;
        password :: String
    INIT
        init { 
            authentication_type := "unauthenticated";
            authentication_token := "";
            username := "";
            password := ""
            }

    TRANS
        init -> Inp ? req [[ isUnauthorized(req) ]] -> bearer
ENDDEF

CHANDEF Chans
::=
    Input :: String ;
    Output :: String
ENDDEF

MODELDEF    Matrix
::=
    CHAN IN     Input
    CHAN OUT    Output

    BEHAVIOUR
        matrix [Input, Output] ()
ENDDEF

CNECTDEF Sut
::=
    CLIENTSOCK

    CHAN OUT    Input   HOST "localhost" PORT 7890
    ENCODE      Input   ? s -> ! toString(s)

    CHAN IN     Output  HOST "localhost" PORT 7890
    DECODE      Output  ! s <- ? s 
ENDDEF
